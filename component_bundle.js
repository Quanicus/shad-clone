const t=document.createElement("template");t.innerHTML="\n    <style>\n        :host {\n            display: block;\n            font-size: .75rem;\n            padding: .5rem .75rem;\n            border-radius: 5px;\n            border: 1px solid;\n            cursor: pointer;\n            transition: background-color 0.05s ease-in;\n            user-select: none;\n            width: fit-content;\n\n            background-color: white;\n            border-color: #303030;\n            color: #303030;\n        }\n        :host([disabled]) {\n            background-color: grey;\n            cursor: auto;\n            pointer-events: none;\n        }\n    </style>\n    <slot></slot>\n";class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0)),this.eventName="",this.mousedown=!1,this.colorScheme={},this.internals_=this.attachInternals()}static get formAssociated(){return!0}get disabled(){return this.hasAttribute("disabled")}get form(){return this.internals_.form}get name(){return this.getAttribute("name")}get type(){return this.getAttribute("type")||"submit"}get value(){return this.getAttribute("value")||""}set value(t){this.setAttribute("value",t)}connectedCallback(){this.initColorScheme(),this.addListeners(),"submit"===this.type&&this.addEventListener("click",this.submitForm)}initColorScheme(){const t=this.getAttribute("data-primary-color")??"white",e=this.getAttribute("data-secondary-color")??"black";this.getAttribute("data-accent-color");const n=this.getAttribute("data-highlight-color")??"#D4D4D4",s=this.colorScheme;s.hover={bgColor:n,bdrColor:e,txtColor:e},s.press={bgColor:e,bdrColor:t,txtColor:t}}setColors(t){const{bgColor:e,bdrColor:n,txtColor:s}=t;this.style.backgroundColor=e,this.style.borderColor=n,this.style.color=s}resetColors(){this.style.removeProperty("background-color"),this.style.removeProperty("border-color"),this.style.removeProperty("color")}addListeners(){this.addEventListener("mouseenter",this.handleMouseIn),this.addEventListener("mousedown",this.handleMouseDown),this.addEventListener("mouseleave",this.handleMouseOut),document.addEventListener("mouseup",this.handleMouseUp),this.addEventListener("click",this.handleClick)}handleClick=()=>{const t=new CustomEvent(this.eventName,{detail:{target:this},bubbles:!0,composed:!0});this.dispatchEvent(t)};handleMouseIn=()=>{this.disabled||(this.mousedown?this.setColors(this.colorScheme.press):this.style.backgroundColor=this.colorScheme.hover.bgColor)};handleMouseDown=t=>{this.mousedown=!0,this.setColors(this.colorScheme.press)};handleMouseUp=()=>{this.mousedown=!1,this.resetColors()};handleMouseOut=()=>{this.resetColors()};submitForm=()=>{const t=this.closest("form");t&&t.requestSubmit()}}customElements.define("shad-button",e);const n=document.createElement("template");n.innerHTML='\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n        :host {\n            position: relative;\n            cursor: pointer;\n            border: 1px solid white;\n            width: 1em;\n            height: 1em; \n        }\n        :host([type="checkbox"]) {\n            display: grid;\n            place-content: center;\n            border-radius: 3px;\n       \n        }\n        :host([type="checkbox"][checked]) {\n            background-color: white;\n            &::after {\n                content: url(\'data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22utf-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3C!--%20License%3A%20PD.%20Made%20by%20Templarian%3A%20https%3A%2F%2Fgithub.com%2FTemplarian%2FWindowsIcons%20--%3E%3Csvg%20width%3D%2215px%22%20height%3D%2215px%22%20viewBox%3D%220%200%2076%2076%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20enable-background%3D%22new%200%200%2076.00%2076.00%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpath%20fill%3D%22%23000000%22%20fill-opacity%3D%221%22%20stroke-width%3D%220.2%22%20stroke-linejoin%3D%22round%22%20d%3D%22M%2023.7501%2C33.25L%2034.8334%2C44.3333L%2052.2499%2C22.1668L%2056.9999%2C26.9168L%2034.8334%2C53.8333L%2019.0001%2C38L%2023.7501%2C33.25%20Z%20%22%2F%3E%3C%2Fsvg%3E\');\n                display: block;\n                width: 15px;\n                height: 15px;\n            }\n        }\n        :host([type="switch"]) {\n            display: flex;\n            align-items: center;\n            width: calc(2em + 3px);\n            height: calc(1em + 3px);\n            border-radius: calc(.5em + 1.5px);\n            border: none;\n            padding-inline: 1.5px;\n            background-color: #4d4d4d;\n            transition: background-color 200ms ease-in-out;\n\n            &::after {\n                content: "";\n                display: block;\n                width: 1em;\n                height: 1em;\n                border-radius: 50%;\n                background-color: black;\n                transition: transform 200ms ease-in-out;\n            }\n        }\n        :host([type="switch"][checked]) {\n            background-color: white;\n\n            &::after {\n                transform: translateX(100%);\n            }\n        }\n        :host([type="radio"]) {\n            display: grid;\n            place-content: center;\n            border-radius: 50%;\n            border-color: #696969;\n        }\n        :host([type="radio"][checked]) {\n            border-color: white;\n\n            & .center {\n                stroke: white;\n                fill: white;\n            }\n        }\n        .svg-container {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            translate: -50% -50%;\n            width: 132%;\n            height: 132%;\n\n            & .border {\n                stroke-dasharray: 40; /* Length of the stroke */\n                stroke-dashoffset: 40;\n                transition: stroke-dashoffset 600ms ease-in-out;\n                filter: blur(.3px);\n                \n                &.glow {\n                    filter: blur(1px);\n                }\n            }\n            & .center {\n                fill: transparent;\n                stroke: transparent;\n            }\n        }\n        :host(:hover) svg,\n        :host(:focus-within) svg {\n            stroke-dashoffset: 0;\n            transition-duration: 400ms;\n        }\n        :host(:not([type="radio"]):hover),\n        :host(:not([type="radio"]):focus) {\n            box-shadow: 0 0 1px 2px white;\n        }\n        input {\n            position: absolute;\n            top: 0;\n            left: 0;\n            pointer-events: none;\n            width: 100%;\n            height: 100%;\n            opacity: 0;\n        }\n        .label {\n            position: absolute;\n            top: 50%;\n            left: calc(100% + .5em);\n            transform: translateY(-50%);\n            cursor: pointer;\n            width: max-content;\n        }\n        \n    </style>\n    <input id="input"></input>\n    <div class="label">\n        <slot></slot>\n    <div>\n';const s=document.createElement("template");s.innerHTML='\n    <div class="svg-container">\n        <svg class="border glow" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">\n            <circle cx="50%" cy="50%" r="40%" stroke="white" stroke-width="2" fill="transparent"/>\n        </svg>\n    </div>\n    <div class="svg-container">\n        <svg class="border glow" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">\n            <circle cx="50%" cy="50%" r="40%" stroke="gold" stroke-width="2" fill="transparent"/>\n        </svg>\n    </div>\n    <div class="svg-container">\n        <svg class="border" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">\n            <circle cx="50%" cy="50%" r="40%" stroke="white" stroke-width="1" fill="transparent"/>\n        </svg>\n    </div>\n    <div class="svg-container">\n        <svg class="center" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">\n            <circle cx="50%" cy="50%" r="20%" stroke-width="1"/>\n        </svg>\n    </div>\n';class i extends HTMLElement{static formAssociated=!0;static inputTypes=["checkbox","radio","switch"];static radioGroups={};constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}).appendChild(n.content.cloneNode(!0)),this.input=this.shadowRoot.querySelector("input"),this._internals=this.attachInternals()}static get observedAttributes(){return["value","checked","name","type","required"]}attributeChangedCallback(t,e,n){switch(t){case"type":if(!i.inputTypes.includes(n))throw Error(`shad-input-toggle must be of type: ${i.inputTypes}`);this.input.type="checkbox";break;case"checked":this.checked=null!==n;break;case"value":this.hasAttribute("checked")&&this._internals.setFormValue(n),this.input.value=n;break;default:this.input[t]=n}}#t(){const t=this.input;["value","type","checked","required","name"].forEach((e=>{Object.defineProperty(this,e,{get:()=>t[e],set:n=>{t[e]=n,"value"===e&&this._internals.setFormValue(n)},enumerable:!0,configurable:!0})}))}connectedCallback(){this.#t(),this.setValidity(),this.tabIndex=this.getAttribute("tabindex")??"0",this.addEventListener("click",this.handleClick),this.input.addEventListener("change",this.handleChange),this.input.addEventListener("click",(t=>{t.stopPropagation()})),this.hasAttribute("type")?"radio"===this.getAttribute("type")&&(this.shadowRoot.appendChild(s.content.cloneNode(!0)),this.hasAttribute("name")&&this.input.addEventListener("change",this.handleNewRadioSelection)):this.setAttribute("type","checkbox")}handleClick=t=>{this.checked=!this.checked,this.input.dispatchEvent(new Event("change"))};handleChange=t=>{this.checked?(this.setAttribute("checked",""),this._internals.setFormValue(this.value)):(this.removeAttribute("checked"),this._internals.setFormValue(null)),this.setValidity(),this.dispatchEvent(new Event("change"))};handleNewRadioSelection=t=>{const e=t.target,n=e.name,s=i.radioGroups[n];e.checked&&n&&s!==e&&(s&&s.checked?(i.radioGroups[n]=e,s.checked=!1,s.dispatchEvent(new Event("change"))):i.radioGroups[n]=e)};setValidity=()=>{this.hasAttribute("required")&&!this.checked?this._internals.setValidity({valueMissing:!0},"This field is required",this.input):this._internals.setValidity({})};addToRadioGroup(){i.radioGroups}get form(){return this._internals.form}}customElements.define("shad-input-toggle",i);const o=document.createElement("template");o.innerHTML='\n    <style>\n        * {\n            box-sizing: border-box;\n            scrollbar-width: none;\n        }\n        :host {\n            position: relative;\n            display: block;\n            font-size: 1rem;\n            cursor: text;\n            width: 100%;\n            max-width: 100%;\n            color: white;\n        }\n        :host(:focus) {\n            & .placeholder::after {\n                font-size: 0.65rem;\n                top: -0.65em;\n                color: gold;\n                padding-inline: 0.3em;\n                transition-duration: 0.15s;\n            }\n            & .text-display {\n                border-color: white;\n                \n            }\n            & span{\n                &.caret::after {\n                    content: \'\';\n                    position: absolute;\n                    left: 0;\n                    width: 1px;\n                    height: 100%;\n                    background-color: gold;\n                    animation: blink 1s step-end infinite;\n                }\n                &.selected {\n                    background-color: gold;\n                    color: black;\n                }\n            }\n            & input {\n                z-index: 2;\n            }\n        }\n        :host(:hover) {\n            & .placeholder::after {\n                \n            }\n            & .text-display {\n                border-color: white;\n            }\n        }\n        :host([type="password"]) {\n            & input {\n                \n            }\n        }\n        .placeholder {\n            --placeholder: "default";\n            position: relative;\n            padding: 0.5em;\n            height: 100%;\n            width: 100%;\n            background-color: black;\n            border-radius: 5px;\n\n            &::after {\n                content: var(--placeholder);\n                position: absolute;\n                font-size: 0.65rem;\n                top: -0.65em;\n                left: 1em;\n                color: gold;\n                background-color: inherit;\n                padding-inline: 0.3em;\n                transition-property: top, font-size;\n                transition-duration: 0.15s;\n                transition-timing-function: ease-in;\n            }     \n        }\n        .placeholder.empty {\n            &::after {\n                top: 0.5rem;\n                border-radiu: 50%;\n                transition-duration: 0.25s;\n                font-size: 1rem;\n                color: white;\n            }\n        }\n        .text-display {\n            position: absolute;\n            display: flex;\n            align-items: center;\n            padding-inline: .5rem;\n            top: 0;\n            left: 0;\n            border: 1px solid #303030;\n            border-radius: 5px;\n            width: 100%;\n            height: 100%;\n            background-color: black;\n            overflow: auto;\n\n            & span {\n                position: relative;\n                flex-shrink: 0;\n                transition: all 50ms linear;\n                overflow: visible;\n\n                &.float {\n                    transform: translateY(-0.2em) scale(1.2);\n                    text-shadow: \n                        0px 0px 1px white,\n                        0px 0px 2px white,\n                        0px 0px 3px white,\n                        0px 0px 4px white,\n                        0px 0px 0px white;\n                }\n            }\n        }\n        @keyframes blink {\n            from, to {\n                visibility: visible;\n            }\n            50% {\n                visibility: hidden;\n            }\n        }\n        input {\n            all: unset;\n            position: relative;\n            width: 100%;\n            height: 100%;\n\n            opacity: 0;\n        }\n    </style>\n    <div class="placeholder">\n        <input spellcheck="false"/>\n        <div class="text-display"></div>\n    </div>\n    <audio id="click" src="./audio/click.mp3"></audio>\n    <audio id="clack" src="./audio/clack.mp3"></audio>\n';class r extends HTMLElement{static formAssociated=!0;static emailRegex="^[^@]+@[^@]+.[^@]+$";static inputTypes=["text","password","email","search","tel","url"];constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}).appendChild(o.content.cloneNode(!0)),this._internals=this.attachInternals(),this.display=this.shadowRoot.querySelector(".text-display"),this.input=this.shadowRoot.querySelector("input"),this.clickSoundClip=this.shadowRoot.getElementById("click"),this.clackSoundClip=this.shadowRoot.getElementById("clack"),this.recentCharInput=document.createElement("div"),this.selectedCards=[],this.bubbleEvents(["change"]),this.attachListeners()}static get observedAttributes(){return["value","type","disabled","required","maxlength","minlength","pattern","readonly","autocomplete","autofocus","name","size"]}attributeChangedCallback(t,e,n){if(e!==n)switch(t){case"type":if(!r.inputTypes.includes(n))throw new Error("shad-input-text can only be of types:",r.inputTypes);"email"===n&&(this.input.pattern=r.emailRegex,n="text"),this.input.type=n;break;case"value":this.input.value=n,this.input.dispatchEvent(new Event("input"));break;default:this.input[t]=n}}connectedCallback(){this._proxyInput(),this._internals.setFormValue(this.value),this._internals.setValidity(this.input.validity,this.input.validationMessage,this.input),this.tabIndex=this.getAttribute("tabindex")??"0",this.input.tabIndex=this.tabIndex,this.initialValue=this.value,this.activateSoundEffects(),this.setPlaceholder(),this.initCaret()}bubbleEvents(t){t.forEach((t=>{this.input.addEventListener(t,(e=>{const n=new CustomEvent(t,{bubbles:!0,cancelable:!0,composed:!0,detail:{originalEvent:e}});this.dispatchEvent(n)}))}))}attachListeners(){const t=this.input;t.addEventListener("beforeinput",this.handleBeforeInput),t.addEventListener("input",this.handleAfterInput),t.addEventListener("scroll",this.syncScroll),t.addEventListener("mousedown",this.startSelecting),t.addEventListener("mouseup",this.captureSelection),t.addEventListener("click",this.captureSelection),t.addEventListener("keyup",this.captureSelection),t.addEventListener("keyup",(()=>{this.recentCharInput.classList.remove("float"),this.needClack&&(this.clackSoundClip.currentTime=0,this.clackSoundClip.play(),this.needClack=!1)})),t.addEventListener("keydown",(()=>console.log("keydown")))}_proxyInput(){const t=this.shadowRoot.querySelector("input");["value","placeholder","disabled","required","maxlength","minlength","pattern","readonly","autocomplete","autofocus","name","size"].forEach((e=>{Object.defineProperty(this,e,{get:()=>t[e],set:n=>{t[e]=n,"value"===e&&this.input.dispatchEvent(new Event("input"))},enumerable:!0,configurable:!0})}))}get value(){return this.input.value}get caretElement(){return this._caretElement}set caretElement(t){this._caretElement!==t&&(this._caretElement.classList.remove("caret"),t&&t.classList.add("caret"),this._caretElement=t)}handleBeforeInput=t=>{console.log("before input");const e=this.display,n=this.input,s=n.selectionStart,i=n.selectionEnd,o=n.value.substring(s,i);switch(o&&(this.selectedCards.forEach((t=>this.display.removeChild(t))),this.caretElement=this.display.children[s]),t.inputType){case"insertText":const n=this.makeCharCard(t.data);n.classList.add("float"),e.insertBefore(n,this.caretElement),this.recentCharInput.classList.remove("float"),this.recentCharInput=n,this.clickSoundClip.currentTime=0,this.clickSoundClip.play(),this.needClack=!0;break;case"deleteContentBackward":!o&&e.children.length>1&&e.removeChild(e.children[s-1]);break;case"insertFromPaste":t.data,[...t.data].forEach((t=>{e.insertBefore(this.makeCharCard(t),this.caretElement)}))}};handleAfterInput=t=>{console.log("after input");const e=this.shadowRoot.querySelector(".placeholder"),n=this.input;this.value.length!==this.display.childElementCount-1&&this.syncInput();const s=this.getAttribute("pattern-error")??"";if(this.input.validity.patternMismatch){const t="email"===this.getAttribute("type")?"Please use a valid email format.":s;n.setCustomValidity(t)}else n.setCustomValidity("");this._internals.setFormValue(this.value),this._internals.setValidity(n.validity,n.validationMessage,this.input),0===n.value.length?e.classList.add("empty"):e.classList.remove("empty")};syncInput(){this.display.innerHTML="",this.initCaret(),[...this.value].forEach((t=>{this.display.insertBefore(this.makeCharCard(t),this.caretElement)}))}syncScroll=()=>{this.display.scrollLeft=this.input.scrollLeft};startSelecting=t=>{const e=this.input;e.addEventListener("mousemove",this.captureSelection),document.addEventListener("mouseup",(()=>{e.removeEventListener("mousemove",this.captureSelection)}))};captureSelection=t=>{const e=this.input,n=e.selectionStart,s=e.selectionEnd;n!==s?this.selectText(n,s):(this.selectText(),this.caretElement=this.display.children[n])};setPlaceholder(){const t=this.shadowRoot.querySelector(".placeholder"),e=this.getAttribute("placeholder")??"";t.style.setProperty("--placeholder",`"${e}"`),this.value||t.classList.add("empty")}initCaret(){const t=this.makeCharCard();t.innerHTML="&nbsp;",t.classList.add("caret"),this.display.appendChild(t),this._caretElement=t}makeCharCard(t){t&&" "!=t||(t="&nbsp;"),"password"===this.getAttribute("type")&&(t='<svg fill="currentcolor" width="8" height="8" viewBox="0 0 36 36" version="1.1"  preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n            <title>shield-solid</title>\n            <path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59Z" class="clr-i-solid clr-i-solid-path-1"></path>\n            <rect x="0" y="0" width="36" height="36" fill-opacity="0"/>\n            </svg>');const e=document.createElement("span");return e.classList.add("char-card"),e.innerHTML=t,e}selectText(t,e){this.selectedCards=[];const n=this.display.children;for(let s=0;s<n.length;s++)s>=t&&s<e?(n[s].classList.add("selected"),this.selectedCards.push(n[s])):n[s].classList.remove("selected")}activateSoundEffects(){this.clickSoundElement=document.createElement("audio")}formAssociatedCallback(t){this.form=t}formDisabledCallback(t){this.input.disabled=t}formResetCallback(){this.display.innerHTML="",this.initialValue?this.value=this.initialValue:(this.initCaret(),this.shadowRoot.querySelector(".placeholder").classList.add("empty"))}formStateRestoreCallback(t,e){this.value=t}}customElements.define("shad-input-text",r);const a=document.createElement("template");a.innerHTML="\n    <style>\n        :host {\n            display: block;\n            background-color: white;\n            color: #303030;\n            font-size: 12px;\n            padding: .5rem;\n            border: 1px solid #303030;\n            border-radius: 5px;\n            transition: opacity 0.2s ease-in;\n            transition-delay: 0.25s;\n            pointer-events: none;\n            z-index: 99999;\n        }\n    </style>\n    <slot><slot>\n";class l extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(a.content.cloneNode(!0)),this.triggerElement=!1}connectedCallback(){this.style.opacity="0",this.style.position="fixed",this.parentElement!==document.body&&(this.triggerElement=this.parentElement,this.formatTriggerElement(),this.parentElement.removeChild(this))}formatTriggerElement(){const t=this.triggerElement;t.addEventListener("mouseover",this.activateTooltip),t.addEventListener("mouseout",this.deactivateTooltip),t.addEventListener("click",this.deactivateTooltip)}activateTooltip=t=>{document.body.appendChild(this);const e=this.triggerElement.getBoundingClientRect(),n=this.getBoundingClientRect();this.style.left=e.left-n.width/2+e.width/2+"px",e.top-n.height<0?(this.style.top=`${e.bottom}px`,this.style.transform="translateY(0)"):(this.style.top=`${e.top}px`,this.style.transform="translateY(-100%)"),this.style.opacity="1"};deactivateTooltip=t=>{document.body.removeChild(this),this.style.opacity="0"}}customElements.define("shad-tooltip",l);class c extends HTMLElement{constructor(){super();const t=document.createElement("template");t.innerHTML='\n        <style>\n            :host, .scroll-bar, .scroll-button {\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center; \n            }\n            :host {\n                position: absolute;\n                font-size: 16px;\n                top: 0;\n                right: 0;\n                height: 100%;\n                min-width: 30px;\n                width: 4vw;\n                background-color: rgba(0,0,0, 0.5) ;\n                z-index: 1;\n            }\n            .scroll-bar {\n                width: 100%;\n                min-height: 25%;\n                gap: 0.6em;\n            }\n            .scroll-button {\n                width: 100%;           \n                color: lightgrey;\n                transition: color 0.3s ease-in-out;\n            }\n            .scroll-button:hover span{\n                color: aqua;\n            }\n            .progress-bar {\n                position: relative;\n                width: 2px;\n                height: 0.6em;\n                border: 1px solid darkgray;\n                border-radius: 2px;\n                background-color: gray;\n                overflow: hidden;\n                transition: height 0.3s ease-in-out;\n            }\n            .progress {\n                height: 100%;\n                background-color: aqua;\n                border: 1px solid aqua;\n                border-radius: 2px;\n                transform: translateY(-100%);\n                transition: transform 0.4s linear;\n            }\n        </style>\n        <div class="scroll-bar"></div>\n        ',this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0)),this.activePage=null}connectedCallback(){this.parentElement.style.setProperty("position","relative"),this.attachContent()}attachContent(){document.addEventListener("DOMContentLoaded",(()=>{const t=this.shadowRoot.querySelector("div");this.previousElementSibling.querySelectorAll(".page-content").forEach(((e,n)=>{const s=this.makeScrollLabel(n),i=this.makeProgressBar();s.appendChild(i),this.setListeners(e,s),t.appendChild(s)})),this.setupScrollContainer()}))}makeScrollLabel(t){const e=document.createElement("label");e.setAttribute("class","scroll-button");const n=document.createElement("span");return n.textContent="0"+String(t),n.style.setProperty("margin-bottom","0.4em"),n.style.setProperty("cursor","pointer"),e.appendChild(n),e}makeProgressBar(){const t=document.createElement("div");t.setAttribute("class","progress-bar");const e=document.createElement("div");return e.setAttribute("class","progress"),t.append(e),t}setListeners(t,e){const n={root:this.previousElementSibling,rootMargin:"-1px 0px -100% 0px",threshold:0},s=new IntersectionObserver(((t,n)=>{const s=e.lastElementChild;s.firstElementChild;for(const n of t){const t=n.target;n.isIntersecting?(s.style.setProperty("height","4em"),t.setAttribute("intersecting","true"),e.style.setProperty("color","aqua")):(s.style.setProperty("height","0.66em"),t.removeAttribute("intersecting"),e.style.setProperty("color","lightgrey"))}}),n);s.observe(t),e.firstElementChild.addEventListener("click",(()=>{t.scrollIntoView({behavior:"smooth",block:"start"})}))}setupScrollContainer(){const t=this.previousElementSibling,e=this.shadowRoot.querySelectorAll(".progress"),n=t.querySelectorAll(".page-content");if(e.length<n.length)throw new Error("number of pages does not match number of generated scroll-bar progBars");t.addEventListener("scroll",(()=>{for(let t=0;t<n.length;t++){const s=n[t],i=e[t],o=s.getBoundingClientRect().top;if(s.hasAttribute("intersecting")){const t=100+o/s.offsetHeight*100;i.style.setProperty("transform",`translateY(-${t}%)`)}else o<0&&i.style.setProperty("transform","translateY(0)")}}))}}customElements.define("scroll-bar",c);
